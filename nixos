#!/usr/bin/env bash

# This script creates a persistent garbage collection root for the shell.nix environment
# using non-experimental features (nix-instantiate and nix-store --add-root).
# This requires 'keep-outputs = true' in your nix.conf to prevent dependencies
# from being garbage collected.

# Define the directory for the GC roots for this project.
# Creating a directory per project helps manage roots.
GCROOT_DIR="$PWD/.nix-gc-roots"
GCROOT_SHELL_DRV="$GCROOT_DIR/shell.drv"

# Ensure the GC root directory exists
mkdir -p "$GCROOT_DIR"

echo "Evaluating shell.nix to get the derivation path..."

# Use nix-instantiate to evaluate shell.nix and get the .drv path.
# We explicitly specify the output path for the .drv file.
SHELL_DRV_PATH=$(nix-instantiate ./shell.nix)

if [ -z "$SHELL_DRV_PATH" ]; then
  echo "Error: Failed to instantiate shell.nix" >&2
  exit 1
fi

echo "Shell derivation path: $SHELL_DRV_PATH"
echo "Creating GC root symlink for the derivation at: $GCROOT_SHELL_DRV"

# Create a GC root symlink pointing to the shell's .drv file.
# Added --realise flag to perform the add-root operation.
# The --indirect flag is often used with --add-root, though its necessity
# when rooting a .drv might be debated in older contexts. It doesn't hurt here.
nix-store --add-root "$GCROOT_SHELL_DRV" "$SHELL_DRV_PATH" --realise --indirect

echo "GC root created. Dependencies will be kept if 'keep-outputs = true' is set in nix.conf."

# Now you can enter the shell environment using nix-shell.
# Nix will use the rooted derivation and, with keep-outputs=true,
# the dependencies will be available without redownloading/rebuilding
# after garbage collection.

echo "To enter the shell environment, run:"
echo "nix-shell ./shell.nix"
echo ""
echo "To run your script within this shell, you can do:"
echo "nix-shell ./shell.nix --run 'python t2.py'"
echo ""
echo "To remove the GC root and allow garbage collection of these dependencies later:"
echo "rm -rf \"$GCROOT_DIR\""

# Note: You no longer run the script directly using a built path like $result/bin/python.
# Instead, you use nix-shell to enter the environment and then run the script.
nix-shell ./shell.nix --run 'python t2.py'
